Trans-ABySS - de novo assembly of RNAseq data using ABySS.

Copyright 2014 Canada's Michael Smith Genome Sciences Centre, BC Cancer Agency

                                        ~ TUTORIAL ~
==================================================================================================

The Trans-ABySS package has 3 main applications:
(1) transabyss          - RNAseq assembler at a single k-mer size
(2) transabyss-merge    - merge multiple assemblies from (1)
(3) transabyss-analyze  - analyze an assembly, either from (1) or (2), for structural variants and
                          splice variants

Content:
[PART 1] Assembly with transabyss
[1.1] Usage.
[1.2] Running transabyss.
[1.3] Input reads.
[1.4] Output assembly path.
[1.5] k-mer size.
[1.6] MPI and multi-threading.
[1.7] Strand-specific assembly.

[PART 2] Merging assemblies with transabyss-merge
[2.1] Usage.
[2.2] Running transabyss-merge.
[2.3] Minimum and maximum k-mer sizes.
[2.4] Output merged assembly path.
[2.5] Output sequence prefixes.

[PART 3] Analyzing an assembly with transabyss-analyze
[3.1] Usage.
[3.2] Running transabyss-analyze.
[3.3] PYTHONPATH.
[3.4] Reference genome and annotations.
[3.5] Alignments and Analyses.
[3.6] Top-level output directory.
[3.7] Configuration files.
[3.8] Running on a HPC cluster.



[PART 1] Assembly with transabyss.

[1.1] Usage.

    transabyss --help
    
    
[1.2] Running transabyss.
    
    transabyss --se reads.fq
  
  See below for assembling single-end reads and/or pair-end reads.
  

[1.3] Input reads.
  
  Supported formats are compressed (gzip/bzip) FASTQ/FASTA/SAM/QSEQ or BAM files.  
  Paired-end reads in FASTQ/A can be interleaved or in separate files.
  Paired-end reads in FASTQ/A must have the suffixes '/1' or '/2' in the read name.
  
  Use options `--se' and `--pe' to specify the path(s) of single-end reads and paired-end reads,
  respectively. Example usages:
  
    --se r.fq                    r.fq is used for sequence content; NO paired-end linkage.
    --pe r.fq                    r.fq is used for BOTH sequence content and pair-end linkage.
    --se SE.fq --pe PE.fq        SE.fq is only used for sequence content;
                                 PE.fq is only used for paired-end linkage.
    --se SE.fq PE.fq --pe PE.fq  BOTH SE.fq and PE.fq are used for sequence content;
                                 ONLY PE.fq is used for paired-end linkage.
                
                                 
[1.4] Output assembly path.
  
  default:  ./transabyss_1.5.1_assembly/transabyss-final.fa
  
  Use options `--name' and `--outdir' to change the output directory and assembly name.
  
  
[1.5] k-mer size.

  default: 32
  
  Use option `--kmer' to adjust the k-mer size.
  k=32 has a good trade-off for assembling both rare and common transcripts.
  Using larger k-mers improve the assembly quality of common transcripts and transcripts with
  repetitive regions, but the assembly of rare transcripts may suffer.
  
  
[1.6] MPI and multi-threading.

  default:  no mpi processes; singe-threaded
    
  Use option `--threads' to specify the number of threads.
  Use option `--mpi' to specify the number of MPI processes.
  
  Only the first stage of assembly (de Bruijn graph) could benefit from MPI; all remaining
  stages may be multi-threaded.


[1.7] Strand-specific assembly.

  Use option `--SS' to indicate that input reads are strand-specific.
  The expected orientation of strand-specific reads is: /1 reads Reverse, /2 reads Forward
    
                <-- R/1
    =================== transcript
    F/2 -->


  
[PART 2] Merging assemblies with transabyss-merge
  
Should you choose to assemble the same dataset with different settings (different k-mer sizes),
you can merge the assemblies together into one FASTA file for downstream analyses (with
transsabyss-analyze). When a sequence is contained in a longer sequence, the longer sequence
is kept.

[2.1] Usage.

    transabyss-merge --help


[2.2] Running transabyss-merge.
    
  Example:
  
    transabyss-merge a.fa b.fa --mink 32 --maxk 64


[2.3] Minimum and maximum k-mer sizes.
  
  `--mink' and `--maxk' are used to specific the smallest and largest k-mer sizes in the
  input assemblies.
  
  
[2.4] Output merged assembly path.
  
  default:  ./transabyss-merged.fa
  
  Use option `--out' to specify the output path.


[2.5] Output sequence prefixes.
  
  Use option `--prefixes' to specify the prefixes of output sequences.
  
  Example:
  
    transabyss-merge a.fa b.fa c.fa --mink 32 --maxk 64 --prefix k32. k48. k64.
  
  -------+---------
  | file | prefix |
  -------+---------
  | a.fa | k32.   |
  | b.fa | k48.   |
  | c.fa | k64.   |
  -------+---------
  
  One prefix for sequences from each input assembly FASTA file. This feature helps you keep
  track of the origin of each seqeunce in the merged assembly.
  
  

[PART 3] Analyzing an assembly with transabyss-analyze

Either a single assembly or a merged assembly can be analyzed against a reference genome and
annotations for structural variants and splice variants.
transabyss-analyze ONLY works with paired-end reads!

[3.1] Usage.

    transabyss-analyze --help


[3.2] Running transabyss-analyze.
  
  Example:
    
    transabyss-analyze -a a.fa -1 r1.fq -2 r2.fq --ref hg19


[3.3] PYTHONPATH.
    
  The absolute path to the Trans-ABySS directory (where `transabyss-analyze' resides) must be
  part of your PYTHONPATH environment variable whenever `transabyss-analyze' is run, ie.
  
  export PYTHONPATH=/home/username/transabyss1.5.1/:$PYTHONPATH
  transabyss-analyze -a a.fa -1 r1.fq -2 r2.fq --ref hg19
      
      
[3.4] Reference genome and annotations.
  
  Use option `--ref' to specify the name of reference genome under the `[references]' section
  in the confuration file at:
  
    configs/transcriptome.cfg
  
  Use option `--annodir' to specify an alternate top-level annotations directory when your
  annotations are NOT in the transabyss' own `annotations' directory.
    
  A bash script is provided to download and set up the human reference genome hg19 and
  the associated annotations:
  
      annotations/setup_hg19.sh
  
  The hg19 reference genome, annotations, and index files would be placed under the directory:
      
      annotations/hg19
  
  For analyses against other reference genomes, please consult us in the Google Group.
  
  
[3.5] Alignments and Analyses.
    
  Use option `--align' to specify the alignment stages to run.
  Use option `--analyze' to specify the analysis stages to run.
  
  By default, ALL analysis stages and their required alignment stages are run.
  
  -----------+------------------------  
  | analysis | alignment(s) required |
  |----------+-----------------------|
  | fusion   | c2g r2c r2g           |
  | indel    | c2g r2c               |
  | splice   | c2g r2c               |
  | track    | c2g                   |
  -----------+------------------------
  
  Example:
  
    transabyss-analyze -a a.fa -1 r1.fq -2 r2.fq --ref hg19 --analyze fusion
    
  This command would run `c2g', `r2c', `r2g' alignments prior to `fusion' analysis.


[3.6] Top-level output directory.

  default:  ./transabyss_1.5.1_analysis
  
  Use option `--outdir' to specify the top-level output directory.
  
  Under this top-level directory, each alignment/analysis stage would create its own output
  directory:
  
    transabyss_1.5.1_analysis/
    |-- contigs_to_genome
    |-- fusions
    |-- indels
    |-- reads_to_contigs
    |-- reads_to_genome
    |-- splicing
    `-- track
  
  
[3.7] Configuration files.
  
  There are several configuration files for `transabyss-analyze':
  
  (1) configs/transcriptome.cfg
      
      This file defines the command templates for individual programs, reference genomes, and
      cluster job resource requirements.
      Use option `--cfg' to specify an alternate location of this file.
      
  (2) configs/model_matcher.cfg
      
      This file defines the annotations available for your reference genomes.
      Use option `--mmcfg' to specify an alternate location of this file.
      
  (3) configs/job_script.cfg
      
      This file defines the settings and job script templates for running cluster jobs.
      Use option `--jobcfg' to specify an alternate location of this file.
  
  All of which may be modified to suit your specific needs.
  Please consult us in the Google Group should you choose to do so.
  
  There are several templates for cluster job-script in the directory:
  
      configs/templaates
      
  Use option `--template' to specify an alternate location of this directory.


[3.8] Running on a HPC cluster.
  
  By default, all alignments and analyses stages would be run on your local machine.
  The following options are intended for cluster jobs only.
  
  --submit              submit jobs to computer cluster instead of execution
                        on local machine
  --ssh HOSTNAME        ssh to specified host for the submission of each
                        cluster job (force '--submit')
  -q STR, --queue STR   submit cluster jobs to the specified queue (force '--
                        submit')
  --max                 use the maximum available resources for each cluster
                        job (force '--submit')
  --no-tmpdir           do not use the default temp directory $TMPDIR for
                        cluster jobs
  
==================================================================================================
                                        ~ EOF ~
